name: Java CI with Gradle
# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: todo
  ECS_SERVICE: todo-service
  ECS_CLUSTER: todo-cluster
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json
  CONTAINER_NAME: todo-container

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up environment variables
        env:
          DB_ENDPOINT: ${{ secrets.DB_ENDPOINT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: clean bootJar

      # 3. docker 컨테이너 생성
      - name: Build Docker Compose
        run: docker compose

      # 3. DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      # 4. 이미지 업로드
      - name: build and release to DockerHub
        env:
          NAME: ${{secrets.DOCKERHUB_USERNAME}}
          REPO: todo
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:latest 
          docker push $NAME/$REPO:latest

      # OpenID Connect 를 이용한 Git Hub AWS 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::941377122831:role/todo-role
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

        #ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

        # 이미지를 빌드하고 ECR에 푸시
      - name: build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/todo:latest .
          docker push $ECR_REGISTRY/todo:latest
          echo "image=$ECR_REGISTRY/todo:latest" >> $GITHUB_OUTPUT

      #푸시된 이미지를 가지고 ECS 서비스 재시작
      - name: Fill in the new Image in the ECS task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true